/* @flow */
import test from 'ava'
import createCacher from '../src'

const myStrategies = [
  {
    pattern: '/items/:id',
    createCacheKey (params: { id: string }) {
      return 'cache:' + params.id
    }
  }
]

type Input = {
  url: string
}

type Result = {
  url: string,
  createdAt: number
}

const func: Input => Promise<Result> = async (input: Input) => {
  return {
    url: input.url,
    createdAt: Date.now()
  }
}

const cacher: Input => Promise<Result> = createCacher(myStrategies, func)

test('returns object if url is cached by createCacheKey', async t => {
  const ret1 = await cacher({url: '/items/aaa'})
  t.deepEqual(ret1, {
    url: '/items/aaa',
    createdAt: ret1.createdAt // generated by inner call
  })

  // return same createdAt with ret1
  const ret2 = await cacher({url: '/items/aaa'})
  t.deepEqual(ret2, {
    url: '/items/aaa',
    createdAt: ret1.createdAt
  })
})

test('always call `call`', async t => {
  const ret1 = await cacher({url: '/xxx/yyy'})
  t.deepEqual(ret1, {
    url: '/xxx/yyy',
    createdAt: ret1.createdAt
  })

  // should not use cache
  const ret2 = await cacher({url: '/xxx/yyy'})
  t.deepEqual(ret2, {
    url: '/xxx/yyy',
    createdAt: ret2.createdAt
  })
})
